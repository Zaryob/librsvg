// This file was generated by gir (0fe730d) from gir-files (469db10)
// DO NOT EDIT

use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use pango;
use pango_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct FontMap(Object<ffi::PangoCairoFontMap>): [
        pango::FontMap => pango_ffi::PangoFontMap,
    ];

    match fn {
        get_type => || ffi::pango_cairo_font_map_get_type(),
    }
}

impl FontMap {
    pub fn get_default() -> Option<pango::FontMap> {
        unsafe {
            from_glib_none(ffi::pango_cairo_font_map_get_default())
        }
    }
}

pub trait FontMapExt {
    fn create_context(&self) -> Option<pango::Context>;

    fn get_resolution(&self) -> f64;

    fn set_default(&self);

    fn set_resolution(&self, dpi: f64);
}

impl<O: IsA<FontMap>> FontMapExt for O {
    fn create_context(&self) -> Option<pango::Context> {
        unsafe {
            from_glib_none(ffi::pango_cairo_font_map_create_context(self.to_glib_none().0))
        }
    }

    fn get_resolution(&self) -> f64 {
        unsafe {
            ffi::pango_cairo_font_map_get_resolution(self.to_glib_none().0)
        }
    }

    fn set_default(&self) {
        unsafe {
            ffi::pango_cairo_font_map_set_default(self.to_glib_none().0);
        }
    }

    fn set_resolution(&self, dpi: f64) {
        unsafe {
            ffi::pango_cairo_font_map_set_resolution(self.to_glib_none().0, dpi);
        }
    }
}
